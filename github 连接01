(function(Scratch) {   'use strict';      class GitHubExtension {     constructor() {       this.token = '';       this.username = '';       this.repository = '';     }          getInfo() {       return {         id: 'githubwriter',         name: 'GitHub连接器',         color1: '#24292e',         color2: '#2f363d',         color3: '#2f363d',         blocks: [           {             opcode: 'setCredentials',             blockType: Scratch.BlockType.COMMAND,             text: '设置GitHub凭据 用户名:[USER] 仓库:[REPO] 令牌:[TOKEN]',             arguments: {               USER: {                 type: Scratch.ArgumentType.STRING,                 defaultValue: 'your-username'               },               REPO: {                 type: Scratch.ArgumentType.STRING,                 defaultValue: 'your-repo'               },               TOKEN: {                 type: Scratch.ArgumentType.STRING,                 defaultValue: 'ghp_xxxxxxxx'               }             }           },           {             opcode: 'writeToFile',             blockType: Scratch.BlockType.COMMAND,             text: '写入文件 [FILENAME] 内容:[CONTENT]',             arguments: {               FILENAME: {                 type: Scratch.ArgumentType.STRING,                 defaultValue: 'example.txt'               },               CONTENT: {                 type: Scratch.ArgumentType.STRING,                 defaultValue: 'Hello GitHub!'               }             }           },           {             opcode: 'readFromFile',             blockType: Scratch.BlockType.REPORTER,             text: '读取文件 [FILENAME]',             arguments: {               FILENAME: {                 type: Scratch.ArgumentType.STRING,                 defaultValue: 'example.txt'               }             }           },           {             opcode: 'updateFile',             blockType: Scratch.BlockType.COMMAND,             text: '更新文件 [FILENAME] 内容:[CONTENT]',             arguments: {               FILENAME: {                 type: Scratch.ArgumentType.STRING,                 defaultValue: 'example.txt'               },               CONTENT: {                 type: Scratch.ArgumentType.STRING,                 defaultValue: 'Updated content'               }             }           },           {             opcode: 'fileExists',             blockType: Scratch.BlockType.BOOLEAN,             text: '文件 [FILENAME] 存在吗？',             arguments: {               FILENAME: {                 type: Scratch.ArgumentType.STRING,                 defaultValue: 'example.txt'               }             }           },           {             opcode: 'deleteFile',             blockType: Scratch.BlockType.COMMAND,             text: '删除文件 [FILENAME]',             arguments: {               FILENAME: {                 type: Scratch.ArgumentType.STRING,                 defaultValue: 'example.txt'               }             }           },           {             opcode: 'listFiles',             blockType: Scratch.BlockType.REPORTER,             text: '列出仓库文件 [PATH]',             arguments: {               PATH: {                 type: Scratch.ArgumentType.STRING,                 defaultValue: ''               }             }           },           '---',           {             opcode: 'getFileInfo',             blockType: Scratch.BlockType.REPORTER,             text: '获取文件信息 [FILENAME]',             arguments: {               FILENAME: {                 type: Scratch.ArgumentType.STRING,                 defaultValue: 'example.txt'               }             }           },           {             opcode: 'getFileSize',             blockType: Scratch.BlockType.REPORTER,             text: '获取文件大小 [FILENAME]',             arguments: {               FILENAME: {                 type: Scratch.ArgumentType.STRING,                 defaultValue: 'example.txt'               }             }           },           {             opcode: 'getLastCommit',             blockType: Scratch.BlockType.REPORTER,             text: '获取最后提交信息 [FILENAME]',             arguments: {               FILENAME: {                 type: Scratch.ArgumentType.STRING,                 defaultValue: 'example.txt'               }             }           }         ]       };     }      setCredentials(args) {       this.username = args.USER;       this.repository = args.REPO;       this.token = args.TOKEN;     }      async makeGitHubRequest(url, method = 'GET', body = null) {       const headers = {         'Authorization': `token ${this.token}`,         'Accept': 'application/vnd.github.v3+json',         'Content-Type': 'application/json'       };        const options = {         method: method,         headers: headers       };        if (body) {         options.body = JSON.stringify(body);       }        try {         const response = await fetch(url, options);         if (!response.ok) {           throw new Error(`GitHub API error: ${response.status} ${response.statusText}`);         }         return await response.json();       } catch (error) {         console.error('GitHub请求错误:', error);         throw error;       }     }      async writeToFile(args) {       if (!this.token || !this.username || !this.repository) {         throw new Error('请先设置GitHub凭据');       }        const filename = args.FILENAME;       const content = args.CONTENT;              const url = `https://api.github.com/repos/${this.username}/${this.repository}/contents/${filename}`;              const contentBase64 = btoa(unescape(encodeURIComponent(content)));              const body = {         message: `创建文件: ${filename}`,         content: contentBase64       };        try {         await this.makeGitHubRequest(url, 'PUT', body);         return true;       } catch (error) {         throw new Error(`写入文件失败: ${error.message}`);       }     }      async readFromFile(args) {       if (!this.token || !this.username || !this.repository) {         throw new Error('请先设置GitHub凭据');       }        const filename = args.FILENAME;       const url = `https://api.github.com/repos/${this.username}/${this.repository}/contents/${filename}`;        try {         const fileData = await this.makeGitHubRequest(url);         const contentBase64 = fileData.content;         const content = decodeURIComponent(escape(atob(contentBase64)));         return content;       } catch (error) {         throw new Error(`读取文件失败: ${error.message}`);       }     }      async updateFile(args) {       if (!this.token || !this.username || !this.repository) {         throw new Error('请先设置GitHub凭据');       }        const filename = args.FILENAME;       const content = args.CONTENT;              const url = `https://api.github.com/repos/${this.username}/${this.repository}/contents/${filename}`;        try {         // 首先获取文件的SHA         const fileData = await this.makeGitHubRequest(url);         const sha = fileData.sha;                  const contentBase64 = btoa(unescape(encodeURIComponent(content)));                  const body = {           message: `更新文件: ${filename}`,           content: contentBase64,           sha: sha         };          await this.makeGitHubRequest(url, 'PUT', body);         return true;       } catch (error) {         throw new Error(`更新文件失败: ${error.message}`);       }     }      async fileExists(args) {       if (!this.token || !this.username || !this.repository) {         throw new Error('请先设置GitHub凭据');       }        const filename = args.FILENAME;       const url = `https://api.github.com/repos/${this.username}/${this.repository}/contents/${filename}`;        try {         await this.makeGitHubRequest(url);         return true;       } catch (error) {         return false;       }     }      async deleteFile(args) {       if (!this.token || !this.username || !this.repository) {         throw new Error('请先设置GitHub凭据');       }        const filename = args.FILENAME;       const url = `https://api.github.com/repos/${this.username}/${this.repository}/contents/${filename}`;        try {         // 首先获取文件的SHA         const fileData = await this.makeGitHubRequest(url);         const sha = fileData.sha;                  const body = {           message: `删除文件: ${filename}`,           sha: sha         };          await this.makeGitHubRequest(url, 'DELETE', body);         return true;       } catch (error) {         throw new Error(`删除文件失败: ${error.message}`);       }     }      async listFiles(args) {       if (!this.token || !this.username || !this.repository) {         throw new Error('请先设置GitHub凭据');       }        const path = args.PATH || '';       const url = `https://api.github.com/repos/${this.username}/${this.repository}/contents/${path}`;        try {         const contents = await this.makeGitHubRequest(url);         const fileNames = contents.map(item => item.name);         return fileNames.join(', ');       } catch (error) {         throw new Error(`列出文件失败: ${error.message}`);       }     }      async getFileInfo(args) {       if (!this.token || !this.username || !this.repository) {         throw new Error('请先设置GitHub凭据');       }        const filename = args.FILENAME;       const url = `https://api.github.com/repos/${this.username}/${this.repository}/contents/${filename}`;        try {         const fileData = await this.makeGitHubRequest(url);         return `名称: ${fileData.name}, 大小: ${fileData.size}字节, 类型: ${fileData.type}`;       } catch (error) {         throw new Error(`获取文件信息失败: ${error.message}`);       }     }      async getFileSize(args) {       if (!this.token || !this.username || !this.repository) {         throw new Error('请先设置GitHub凭据');       }        const filename = args.FILENAME;       const url = `https://api.github.com/repos/${this.username}/${this.repository}/contents/${filename}`;        try {         const fileData = await this.makeGitHubRequest(url);         return fileData.size;       } catch (error) {         throw new Error(`获取文件大小失败: ${error.message}`);       }     }      async getLastCommit(args) {       if (!this.token || !this.username || !this.repository) {         throw new Error('请先设置GitHub凭据');       }        const filename = args.FILENAME;       const url = `https://api.github.com/repos/${this.username}/${this.repository}/commits?path=${filename}&per_page=1`;        try {         const commits = await this.makeGitHubRequest(url);         if (commits.length > 0) {           const commit = commits[0];           return `提交者: ${commit.commit.author.name}, 时间: ${commit.commit.author.date}, 信息: ${commit.commit.message}`;         } else {           return '无提交记录';         }       } catch (error) {         throw new Error(`获取提交信息失败: ${error.message}`);       }     }   }    Scratch.extensions.register(new GitHubExtension()); })(Scratch);